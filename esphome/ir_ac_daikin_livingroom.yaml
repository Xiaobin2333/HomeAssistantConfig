esphome:
  name: ir_ac_daikin_livingroom
  platform: ESP8266
  board: esp01_1m
  includes: 
    - include/daikin_ir.h
  libraries:
    - IRremoteESP8266

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "IR AC Daikin LivingRoom"
    password: !secret wifi_fallback_ap_pass

captive_portal:
logger:

#web_server:
#  port: 80

# Enable Home Assistant API
api:
  password: !secret esphome_api_password

ota:
  password: !secret esphome_api_password

# Use the blue LED as a status light.
#   Blink slowly = Temporary issue (WiFi/MQTT disconnected, sensor unavailable, ...)
#   Blink quickly = Error encountered
status_led:
  pin: 
    number: GPIO4

# Configure the IR receiver. Handy to pickup confirmation messages
# from your AC (or capture commands from the actual remote)
#remote_receiver:
#  id: rcvr
#  pin: 
#    number: GPIO5
#    inverted: True
#  dump: all

# Configure the IR LED: this one sends commands to other devices
remote_transmitter:
  pin:
    number: GPIO14
    inverted: false
  carrier_duty_percent: 50%

sensor:
  - platform: homeassistant
    name: "Current temperature"
    entity_id: sensor.esphome_for_ir_ac_daikin_livingroom
    id: temp
    internal: true
    unit_of_measurement: Â°C

# Configure the AC unit you have. Mine is a Daikin. Other supported brands are listed here:
# https://esphome.io/components/climate/ir_climate.html?highlight=climate

climate:
  - platform: custom
    lambda: |-
      auto daikinac = new DaikinAC();
      daikinac->set_sensor(id(temp));
      App.register_component(daikinac);
      return {daikinac};
    climates:
      - name: "Daikin AC - Living Room"
      #receiver_id: rcvr
      # Add a reference to the temperature sensor here
      #sensor: temp






















#sdf