substitutions:
  board_name: ir_ac_daikin_livingroom

esphome:
  name: ${board_name}
  platform: ESP8266
  board: esp01_1m
  includes: 
    - include/daikin_ir.h
  libraries:
    - IRremoteESP8266

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "IR AC Daikin LivingRoom"
    password: !secret wifi_fallback_ap_pass

captive_portal:
logger:

#web_server:
#  port: 80

api:
  password: !secret esphome_api_password

ota:
  password: !secret esphome_api_password

# Use the blue LED as a status light.
#   Blink slowly = Temporary issue (WiFi/MQTT disconnected, sensor unavailable, ...)
#   Blink quickly = Error encountered
status_led:
  pin: 
    number: GPIO4

#remote_receiver:
#  id: rcvr
#  pin: 
#    number: GPIO5
#    inverted: True
#  dump: all

# Configure the IR LED: this one sends commands to other devices
remote_transmitter:
  pin:
    number: GPIO14
    inverted: false
  carrier_duty_percent: 50%

sensor:
  - platform: homeassistant
    name: "Current temperature"
    entity_id: sensor.esphome_for_ir_ac_daikin_livingroom
    id: ha_temp_livingroom
    internal: true
    unit_of_measurement: Â°C
    accuracy_decimals: 1

  - platform: wifi_signal
    name: ${board_name}_wifi_rssi
    update_interval: 60s

binary_sensor:
  - platform: status
    name: ${board_name}_status

  - platform: gpio
    pin:
      number: GPIO13
      inverted: true
    internal: true
    name: ${board_name}_button
    id: button

climate:
  - platform: custom
    lambda: |-
      auto daikinac = new DaikinAC();
      daikinac->set_sensor(id(ha_temp_livingroom));
      App.register_component(daikinac);
      return {daikinac};
    climates:
      - name: "Daikin AC - Living Room"
      #receiver_id: rcvr

time:
  - platform: homeassistant
    id: homeassistant_time